[build-system]
build-backend = "hatchling.build"
requires = [
  "hatch-fancy-pypi-readme",
  "hatch-vcs",
  "hatchling",
]

[project]
name = "jinjanator-plugins"
description = "Package which provides the plugin API for the Jinjanator tool"
license = { text="Apache-2.0" }
authors = [
  { name="Kevin P. Fleming", email="jinjanator@kevin.km6g.us" },
]
requires-python = ">=3.8"
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Intended Audience :: System Administrators",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Typing :: Typed",
]
dynamic = [
  "readme",
  "version",
]
dependencies = [
  "attrs",
  "pluggy",
]
[project.urls]
"Bug Tracker" = "https://github.com/kpfleming/jinjanator-plugins/issues"
"Homepage" = "https://github.com/kpfleming/jinjanator-plugins"

[tool.hatch.envs.changelog]
dependencies = [
  "towncrier",
]

[tool.hatch.envs.changelog.scripts]
draft = [
  "towncrier build --version main --draft",
]
release = [
  "towncrier build --version {args}",
]

[tool.hatch.version]
source = "vcs"

[tool.hatch.build]
exclude = [
  "*~",
  ".github",
]

[tool.hatch.build.targets.sdist]
include = [
    "src",
    "plugin_example",
    "*.md",
]

[tool.hatch.build.targets.wheel]
packages = [
    "src/jinjanator_plugins",
]

[tool.hatch.envs.default]
python = "3.11"

[tool.hatch.envs.lint]
dependencies = [
    "black",
    "ruff",
    "mypy",
    "pytest", # needed for type-checking plugin_example
]

[tool.hatch.envs.lint.scripts]
lint = [
     "black --preview src plugin_example",
     "ruff check --fix -- src plugin_example",
     "mypy --package jinjanator_plugins",
     "mypy plugin_example/*.py",
     "shellcheck workflow-support/*.sh",
]
lint-action = [
     "black --check --diff --preview src plugin_example",
     "ruff check --format=github -- src plugin_example",
     "mypy --package jinjanator_plugins",
     "mypy plugin_example/*.py",
     "shellcheck workflow-support/*.sh",
]

[tool.hatch.envs.ci]
dependencies = [
    "coverage[toml]",
    "jinjanator",
    "pytest",
    "pytest-cov",
    "pytest-icdiff",
]

[[tool.hatch.envs.ci.matrix]]
python = [
"3.8",
"3.9",
"3.10",
"3.11",
"3.12",
]

[tool.hatch.envs.ci.scripts]
ci = [
    "pip install ./plugin_example",
    "rm -f .coverage",
    # run tests
    "pytest --verbose --cov-append  --cov-branch --cov-fail-under=100 --cov=jinjanator_plugins",
    # produce a coverage report with 'missing' lines indicated
    "coverage report -m",
]

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/markdown"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
text = """
# *jinjanator-plugins*: An API package for Jinjanator plugins

"""

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "README.md"
start-after = "<!-- fancy-readme start -->"
end-before = "<!-- fancy-readme end -->"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
text = """
## Release Information
"""

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "CHANGELOG.md"
start-after = "<!-- towncrier release notes start -->"
#pattern = "\n(###.+?\n)## "

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
text = """
---
[â†’ Full Changelog](https://github.com/kpfleming/jinjanator-plugins/blob/main/CHANGELOG.md)
"""

[[tool.hatch.metadata.hooks.fancy-pypi-readme.substitutions]]
pattern = '\[(.+?)\]\(((?!https?://)\S+?)\)'
replacement = '[\1](https://github.com/kpfleming/jinjanator-plugins/tree/main/\g<2>)'

[[tool.hatch.metadata.hooks.fancy-pypi-readme.substitutions]]
pattern = "#(\\d+)"
replacement = "[#\\1](https://github.com/kpfleming/jinjanator-plugins/issues/\\1)"

[tool.black]
line-length = 90

[tool.ruff]
src = ["src"]
format = "grouped"
target-version = "py38"
select = ["ALL"]

ignore = [
  "ANN",      # Mypy is better at this.
  "C901",     # Leave complexity to me.
  "COM",      # Leave commas to Black.
  "D",        # We have different ideas about docstrings.
  "E501",     # leave line-length enforcement to Black
  "PLR0912",  # Leave complexity to me.
  "TRY301",   # Raise in try blocks can totally make sense.
]
unfixable = ["F401"]

[tool.ruff.per-file-ignores]
"plugin_example/*" = [
  "INP001",  # we don't care that these are in implicit namespace packages
]
"plugin_example/tests/*" = [
  "PLC1901", # empty strings are falsey, but are less specific in tests
  "PT005",   # we use always underscores and explicit names
  "S101",    # assert
  "SIM300",  # Yoda rocks in tests
]

[tool.ruff.isort]
lines-between-types = 1
lines-after-imports = 2

[tool.pytest.ini_options]
minversion = "6.0"
xfail_strict = true
testpaths = [
    "plugin_example/tests",
]
addopts = [
    "-ra",
    "--strict-markers",
]

[tool.mypy]
python_version = 3.8
namespace_packages = true
explicit_package_bases = true
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
follow_imports = "normal"
no_implicit_optional = true
strict_equality = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true

[tool.towncrier]
name = "jinjanator-plugins"
package = "jinjanator_plugins"
directory = "changelog.d"
filename = "CHANGELOG.md"
start_string = "<!-- towncrier release notes start -->\n"
template = "changelog.d/towncrier_template.md.jinja"
title_format = ""
issue_format = "[#{issue}](https://github.com/kpfleming/jinjanator-plugins/issues/{issue})"
underlines = ["", "", ""]

[[tool.towncrier.section]]
path = ""

[[tool.towncrier.type]]
directory = "breaking"
name = "Backwards-incompatible Changes"
showcontent = true

[[tool.towncrier.type]]
directory = "deprecating"
name = "Deprecations"
showcontent = true

[[tool.towncrier.type]]
directory = "adding"
name = "Additions"
showcontent = true

[[tool.towncrier.type]]
directory = "changing"
name = "Changes"
showcontent = true

[[tool.towncrier.type]]
directory = "fixing"
name = "Fixes"
showcontent = true
